const express = require("express");
const axios = require('axios');
const cheerio = require('cheerio');
const PORT = 3000;
const app = express();
app.use(express.json());

app.get('/download/facebook', async (req, res) => {
  try {
    const url = req.query.url;
    if (!url) return res.json({
      creator: 'FLex-dev',
      message: 'pls put facebook url'
    });

    // Send POST request
    const response = await axios.post(
      'https://v3.fdownloader.net/api/ajaxSearch',
      new URLSearchParams({
        k_exp: '1751154806',
        k_token: '65414774a365b3671061bfe10e667029385b039d66e5781cd7109d3e4eb303c6',
        q: url,
        lang: 'ar',
        web: 'fdownloader.net',
        v: 'v2',
        w: '',
        cftoken:
          'JWT.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpcCI6IjE5Ny4zOC44MS41OCIsInVybCI6Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZS9yLzE2cm1CUkxHbW4vIiwibmJmIjoxNzUxODA3OTYxLCJleHAiOjE3NTE4MDgyNjEsImlhdCI6MTc1MTgwNzk2MX0.oPuMpP0nvDixhLZ1nlv--yZ_RBWIl1UI5C5h5vTYo-Y',
      }),
      {
        headers: {
          accept: '*/*',
          'accept-language': 'en-US,en;q=0.9,ar;q=0.8',
          'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
          origin: 'https://fdownloader.net',
          priority: 'u=1, i',
          referer: 'https://fdownloader.net/',
          'sec-ch-ua': '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
          'sec-ch-ua-mobile': '?0',
          'sec-ch-ua-platform': '"Windows"',
          'sec-fetch-dest': 'empty',
          'sec-fetch-mode': 'cors',
          'sec-fetch-site': 'same-site',
          'user-agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
        },
      }
    );

    // Check if response contains data
    const responseData = response.data;
    if (!responseData || !responseData.data) {
      throw new Error('No HTML data found in response');
    }

    // Load HTML from data field in response
    const $ = cheerio.load(responseData.data);

    // Remove unwanted elements (like ads)
    $('div.ads-slot').remove();
    $('script').remove();

    // Initialize result object
    const result = {
      title: '',
      duration: '',
      thumbnail: undefined,
      downloadLinks: {}, // Changed to object
    };

    // Extract title
    result.title = $('h3').text().trim() || 'No title found';

    // Extract duration
    result.duration = $('p').first().text().trim() || 'No duration found';

    // Extract thumbnail
    result.thumbnail = $('img').attr('src') || undefined;

    // Extract download links from <a> tags
    $('a.download-link-fb').each((i, element) => {
      const quality = $(element).closest('tr').find('.video-quality').text().trim();
      const url = $(element).attr('href');
      if (quality && url) {
        result.downloadLinks[quality] = url; // Add to object with quality as key
      }
    });

    // Extract additional links from <button> tags
    $('button[data-videourl]').each((i, element) => {
      const quality = $(element).closest('tr').find('.video-quality').text().trim();
      const url = $(element).attr('data-videourl');
      if (quality && url) {
        result.downloadLinks[quality] = url; // Add to object with quality as key
      }
    });

    // Send response
    res.json({
      creator: 'flex-dev',
      result: result
    });

  } catch (error) {
    console.error('Error:', error.message);
    res.status(500).json({
      creator: 'flex-dev',
      message: 'An error occurred while processing the request'
    });
  }
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});